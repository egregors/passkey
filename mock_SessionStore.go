// Code generated by mockery v2.47.0. DO NOT EDIT.

package passkey

import mock "github.com/stretchr/testify/mock"

// MockSessionStore is an autogenerated mock type for the SessionStore type
type MockSessionStore[T any] struct {
	mock.Mock
}

type MockSessionStore_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockSessionStore[T]) EXPECT() *MockSessionStore_Expecter[T] {
	return &MockSessionStore_Expecter[T]{mock: &_m.Mock}
}

// Create provides a mock function with given fields: data
func (_m *MockSessionStore[T]) Create(data T) (string, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(T) (string, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(T) string); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(T) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSessionStore_Create_Call[T any] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - data T
func (_e *MockSessionStore_Expecter[T]) Create(data interface{}) *MockSessionStore_Create_Call[T] {
	return &MockSessionStore_Create_Call[T]{Call: _e.mock.On("Create", data)}
}

func (_c *MockSessionStore_Create_Call[T]) Run(run func(data T)) *MockSessionStore_Create_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *MockSessionStore_Create_Call[T]) Return(_a0 string, _a1 error) *MockSessionStore_Create_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionStore_Create_Call[T]) RunAndReturn(run func(T) (string, error)) *MockSessionStore_Create_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: token
func (_m *MockSessionStore[T]) Delete(token string) {
	_m.Called(token)
}

// MockSessionStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSessionStore_Delete_Call[T any] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - token string
func (_e *MockSessionStore_Expecter[T]) Delete(token interface{}) *MockSessionStore_Delete_Call[T] {
	return &MockSessionStore_Delete_Call[T]{Call: _e.mock.On("Delete", token)}
}

func (_c *MockSessionStore_Delete_Call[T]) Run(run func(token string)) *MockSessionStore_Delete_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionStore_Delete_Call[T]) Return() *MockSessionStore_Delete_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockSessionStore_Delete_Call[T]) RunAndReturn(run func(string)) *MockSessionStore_Delete_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: token
func (_m *MockSessionStore[T]) Get(token string) (*T, bool) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *T
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*T, bool)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *T); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockSessionStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSessionStore_Get_Call[T any] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - token string
func (_e *MockSessionStore_Expecter[T]) Get(token interface{}) *MockSessionStore_Get_Call[T] {
	return &MockSessionStore_Get_Call[T]{Call: _e.mock.On("Get", token)}
}

func (_c *MockSessionStore_Get_Call[T]) Run(run func(token string)) *MockSessionStore_Get_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionStore_Get_Call[T]) Return(_a0 *T, _a1 bool) *MockSessionStore_Get_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionStore_Get_Call[T]) RunAndReturn(run func(string) (*T, bool)) *MockSessionStore_Get_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionStore creates a new instance of MockSessionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionStore[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionStore[T] {
	mock := &MockSessionStore[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
