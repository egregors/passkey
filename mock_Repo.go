// Code generated by mockery v2.47.0. DO NOT EDIT.

package passkey

import mock "github.com/stretchr/testify/mock"

// MockRepo is an autogenerated mock type for the UserStore type
type MockRepo struct {
	mock.Mock
}

type MockRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepo) EXPECT() *MockRepo_Expecter {
	return &MockRepo_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: username
func (_m *MockRepo) Create(username string) (User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepo_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepo_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - username string
func (_e *MockRepo_Expecter) CreateUser(username interface{}) *MockRepo_CreateUser_Call {
	return &MockRepo_CreateUser_Call{Call: _e.mock.On("Create", username)}
}

func (_c *MockRepo_CreateUser_Call) Run(run func(username string)) *MockRepo_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepo_CreateUser_Call) Return(_a0 User, _a1 error) *MockRepo_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepo_CreateUser_Call) RunAndReturn(run func(string) (User, error)) *MockRepo_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: userID
func (_m *MockRepo) Get(userID []byte) (User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func([]byte) User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(User)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepo_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRepo_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - userID []byte
func (_e *MockRepo_Expecter) GetUser(userID interface{}) *MockRepo_GetUser_Call {
	return &MockRepo_GetUser_Call{Call: _e.mock.On("Get", userID)}
}

func (_c *MockRepo_GetUser_Call) Run(run func(userID []byte)) *MockRepo_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockRepo_GetUser_Call) Return(_a0 User, _a1 error) *MockRepo_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepo_GetUser_Call) RunAndReturn(run func([]byte) (User, error)) *MockRepo_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByName provides a mock function with given fields: username
func (_m *MockRepo) GetByName(username string) (User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepo_GetUserByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockRepo_GetUserByName_Call struct {
	*mock.Call
}

// GetUserByName is a helper method to define mock.On call
//   - username string
func (_e *MockRepo_Expecter) GetUserByName(username interface{}) *MockRepo_GetUserByName_Call {
	return &MockRepo_GetUserByName_Call{Call: _e.mock.On("GetByName", username)}
}

func (_c *MockRepo_GetUserByName_Call) Run(run func(username string)) *MockRepo_GetUserByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepo_GetUserByName_Call) Return(_a0 User, _a1 error) *MockRepo_GetUserByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepo_GetUserByName_Call) RunAndReturn(run func(string) (User, error)) *MockRepo_GetUserByName_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUser provides a mock function with given fields: _a0
func (_m *MockRepo) Update(_a0 User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepo_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepo_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - _a0 User
func (_e *MockRepo_Expecter) SaveUser(_a0 interface{}) *MockRepo_SaveUser_Call {
	return &MockRepo_SaveUser_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *MockRepo_SaveUser_Call) Run(run func(_a0 User)) *MockRepo_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(User))
	})
	return _c
}

func (_c *MockRepo_SaveUser_Call) Return(_a0 error) *MockRepo_SaveUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepo_SaveUser_Call) RunAndReturn(run func(User) error) *MockRepo_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepo creates a new instance of MockRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepo {
	mock := &MockRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
