// Code generated by mockery v2.43.2. DO NOT EDIT.

package passkey

import mock "github.com/stretchr/testify/mock"

// MockUserStore is an autogenerated mock type for the UserStore type
type MockUserStore struct {
	mock.Mock
}

type MockUserStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserStore) EXPECT() *MockUserStore_Expecter {
	return &MockUserStore_Expecter{mock: &_m.Mock}
}

// GetOrCreateUser provides a mock function with given fields: userID
func (_m *MockUserStore) GetOrCreateUser(userID string) User {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateUser")
	}

	var r0 User
	if rf, ok := ret.Get(0).(func(string) User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(User)
		}
	}

	return r0
}

// MockUserStore_GetOrCreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateUser'
type MockUserStore_GetOrCreateUser_Call struct {
	*mock.Call
}

// GetOrCreateUser is a helper method to define mock.On call
//   - userID string
func (_e *MockUserStore_Expecter) GetOrCreateUser(userID interface{}) *MockUserStore_GetOrCreateUser_Call {
	return &MockUserStore_GetOrCreateUser_Call{Call: _e.mock.On("GetOrCreateUser", userID)}
}

func (_c *MockUserStore_GetOrCreateUser_Call) Run(run func(userID string)) *MockUserStore_GetOrCreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserStore_GetOrCreateUser_Call) Return(_a0 User) *MockUserStore_GetOrCreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserStore_GetOrCreateUser_Call) RunAndReturn(run func(string) User) *MockUserStore_GetOrCreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUser provides a mock function with given fields: _a0
func (_m *MockUserStore) SaveUser(_a0 User) {
	_m.Called(_a0)
}

// MockUserStore_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type MockUserStore_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - _a0 User
func (_e *MockUserStore_Expecter) SaveUser(_a0 interface{}) *MockUserStore_SaveUser_Call {
	return &MockUserStore_SaveUser_Call{Call: _e.mock.On("SaveUser", _a0)}
}

func (_c *MockUserStore_SaveUser_Call) Run(run func(_a0 User)) *MockUserStore_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(User))
	})
	return _c
}

func (_c *MockUserStore_SaveUser_Call) Return() *MockUserStore_SaveUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserStore_SaveUser_Call) RunAndReturn(run func(User)) *MockUserStore_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserStore creates a new instance of MockUserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserStore {
	mock := &MockUserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
