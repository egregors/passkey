// Code generated by mockery v2.49.0. DO NOT EDIT.

package deps

import (
	http "net/http"

	protocol "github.com/go-webauthn/webauthn/protocol"
	mock "github.com/stretchr/testify/mock"

	webauthn "github.com/go-webauthn/webauthn/webauthn"
)

// MockWebAuthnInterface is an autogenerated mock type for the WebAuthnInterface type
type MockWebAuthnInterface struct {
	mock.Mock
}

type MockWebAuthnInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWebAuthnInterface) EXPECT() *MockWebAuthnInterface_Expecter {
	return &MockWebAuthnInterface_Expecter{mock: &_m.Mock}
}

// BeginLogin provides a mock function with given fields: user, opts
func (_m *MockWebAuthnInterface) BeginLogin(user webauthn.User, opts ...webauthn.LoginOption) (*protocol.CredentialAssertion, *webauthn.SessionData, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, user)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BeginLogin")
	}

	var r0 *protocol.CredentialAssertion
	var r1 *webauthn.SessionData
	var r2 error
	if rf, ok := ret.Get(0).(func(webauthn.User, ...webauthn.LoginOption) (*protocol.CredentialAssertion, *webauthn.SessionData, error)); ok {
		return rf(user, opts...)
	}
	if rf, ok := ret.Get(0).(func(webauthn.User, ...webauthn.LoginOption) *protocol.CredentialAssertion); ok {
		r0 = rf(user, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.CredentialAssertion)
		}
	}

	if rf, ok := ret.Get(1).(func(webauthn.User, ...webauthn.LoginOption) *webauthn.SessionData); ok {
		r1 = rf(user, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*webauthn.SessionData)
		}
	}

	if rf, ok := ret.Get(2).(func(webauthn.User, ...webauthn.LoginOption) error); ok {
		r2 = rf(user, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockWebAuthnInterface_BeginLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginLogin'
type MockWebAuthnInterface_BeginLogin_Call struct {
	*mock.Call
}

// BeginLogin is a helper method to define mock.On call
//   - user webauthn.User
//   - opts ...webauthn.LoginOption
func (_e *MockWebAuthnInterface_Expecter) BeginLogin(user interface{}, opts ...interface{}) *MockWebAuthnInterface_BeginLogin_Call {
	return &MockWebAuthnInterface_BeginLogin_Call{Call: _e.mock.On("BeginLogin",
		append([]interface{}{user}, opts...)...)}
}

func (_c *MockWebAuthnInterface_BeginLogin_Call) Run(run func(user webauthn.User, opts ...webauthn.LoginOption)) *MockWebAuthnInterface_BeginLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]webauthn.LoginOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(webauthn.LoginOption)
			}
		}
		run(args[0].(webauthn.User), variadicArgs...)
	})
	return _c
}

func (_c *MockWebAuthnInterface_BeginLogin_Call) Return(_a0 *protocol.CredentialAssertion, _a1 *webauthn.SessionData, _a2 error) *MockWebAuthnInterface_BeginLogin_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockWebAuthnInterface_BeginLogin_Call) RunAndReturn(run func(webauthn.User, ...webauthn.LoginOption) (*protocol.CredentialAssertion, *webauthn.SessionData, error)) *MockWebAuthnInterface_BeginLogin_Call {
	_c.Call.Return(run)
	return _c
}

// BeginRegistration provides a mock function with given fields: user, opts
func (_m *MockWebAuthnInterface) BeginRegistration(user webauthn.User, opts ...webauthn.RegistrationOption) (*protocol.CredentialCreation, *webauthn.SessionData, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, user)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BeginRegistration")
	}

	var r0 *protocol.CredentialCreation
	var r1 *webauthn.SessionData
	var r2 error
	if rf, ok := ret.Get(0).(func(webauthn.User, ...webauthn.RegistrationOption) (*protocol.CredentialCreation, *webauthn.SessionData, error)); ok {
		return rf(user, opts...)
	}
	if rf, ok := ret.Get(0).(func(webauthn.User, ...webauthn.RegistrationOption) *protocol.CredentialCreation); ok {
		r0 = rf(user, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.CredentialCreation)
		}
	}

	if rf, ok := ret.Get(1).(func(webauthn.User, ...webauthn.RegistrationOption) *webauthn.SessionData); ok {
		r1 = rf(user, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*webauthn.SessionData)
		}
	}

	if rf, ok := ret.Get(2).(func(webauthn.User, ...webauthn.RegistrationOption) error); ok {
		r2 = rf(user, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockWebAuthnInterface_BeginRegistration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginRegistration'
type MockWebAuthnInterface_BeginRegistration_Call struct {
	*mock.Call
}

// BeginRegistration is a helper method to define mock.On call
//   - user webauthn.User
//   - opts ...webauthn.RegistrationOption
func (_e *MockWebAuthnInterface_Expecter) BeginRegistration(user interface{}, opts ...interface{}) *MockWebAuthnInterface_BeginRegistration_Call {
	return &MockWebAuthnInterface_BeginRegistration_Call{Call: _e.mock.On("BeginRegistration",
		append([]interface{}{user}, opts...)...)}
}

func (_c *MockWebAuthnInterface_BeginRegistration_Call) Run(run func(user webauthn.User, opts ...webauthn.RegistrationOption)) *MockWebAuthnInterface_BeginRegistration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]webauthn.RegistrationOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(webauthn.RegistrationOption)
			}
		}
		run(args[0].(webauthn.User), variadicArgs...)
	})
	return _c
}

func (_c *MockWebAuthnInterface_BeginRegistration_Call) Return(creation *protocol.CredentialCreation, session *webauthn.SessionData, err error) *MockWebAuthnInterface_BeginRegistration_Call {
	_c.Call.Return(creation, session, err)
	return _c
}

func (_c *MockWebAuthnInterface_BeginRegistration_Call) RunAndReturn(run func(webauthn.User, ...webauthn.RegistrationOption) (*protocol.CredentialCreation, *webauthn.SessionData, error)) *MockWebAuthnInterface_BeginRegistration_Call {
	_c.Call.Return(run)
	return _c
}

// FinishLogin provides a mock function with given fields: user, session, response
func (_m *MockWebAuthnInterface) FinishLogin(user webauthn.User, session webauthn.SessionData, response *http.Request) (*webauthn.Credential, error) {
	ret := _m.Called(user, session, response)

	if len(ret) == 0 {
		panic("no return value specified for FinishLogin")
	}

	var r0 *webauthn.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(webauthn.User, webauthn.SessionData, *http.Request) (*webauthn.Credential, error)); ok {
		return rf(user, session, response)
	}
	if rf, ok := ret.Get(0).(func(webauthn.User, webauthn.SessionData, *http.Request) *webauthn.Credential); ok {
		r0 = rf(user, session, response)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webauthn.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(webauthn.User, webauthn.SessionData, *http.Request) error); ok {
		r1 = rf(user, session, response)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWebAuthnInterface_FinishLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishLogin'
type MockWebAuthnInterface_FinishLogin_Call struct {
	*mock.Call
}

// FinishLogin is a helper method to define mock.On call
//   - user webauthn.User
//   - session webauthn.SessionData
//   - response *http.Request
func (_e *MockWebAuthnInterface_Expecter) FinishLogin(user interface{}, session interface{}, response interface{}) *MockWebAuthnInterface_FinishLogin_Call {
	return &MockWebAuthnInterface_FinishLogin_Call{Call: _e.mock.On("FinishLogin", user, session, response)}
}

func (_c *MockWebAuthnInterface_FinishLogin_Call) Run(run func(user webauthn.User, session webauthn.SessionData, response *http.Request)) *MockWebAuthnInterface_FinishLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(webauthn.User), args[1].(webauthn.SessionData), args[2].(*http.Request))
	})
	return _c
}

func (_c *MockWebAuthnInterface_FinishLogin_Call) Return(_a0 *webauthn.Credential, _a1 error) *MockWebAuthnInterface_FinishLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWebAuthnInterface_FinishLogin_Call) RunAndReturn(run func(webauthn.User, webauthn.SessionData, *http.Request) (*webauthn.Credential, error)) *MockWebAuthnInterface_FinishLogin_Call {
	_c.Call.Return(run)
	return _c
}

// FinishRegistration provides a mock function with given fields: user, session, response
func (_m *MockWebAuthnInterface) FinishRegistration(user webauthn.User, session webauthn.SessionData, response *http.Request) (*webauthn.Credential, error) {
	ret := _m.Called(user, session, response)

	if len(ret) == 0 {
		panic("no return value specified for FinishRegistration")
	}

	var r0 *webauthn.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(webauthn.User, webauthn.SessionData, *http.Request) (*webauthn.Credential, error)); ok {
		return rf(user, session, response)
	}
	if rf, ok := ret.Get(0).(func(webauthn.User, webauthn.SessionData, *http.Request) *webauthn.Credential); ok {
		r0 = rf(user, session, response)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webauthn.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(webauthn.User, webauthn.SessionData, *http.Request) error); ok {
		r1 = rf(user, session, response)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWebAuthnInterface_FinishRegistration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishRegistration'
type MockWebAuthnInterface_FinishRegistration_Call struct {
	*mock.Call
}

// FinishRegistration is a helper method to define mock.On call
//   - user webauthn.User
//   - session webauthn.SessionData
//   - response *http.Request
func (_e *MockWebAuthnInterface_Expecter) FinishRegistration(user interface{}, session interface{}, response interface{}) *MockWebAuthnInterface_FinishRegistration_Call {
	return &MockWebAuthnInterface_FinishRegistration_Call{Call: _e.mock.On("FinishRegistration", user, session, response)}
}

func (_c *MockWebAuthnInterface_FinishRegistration_Call) Run(run func(user webauthn.User, session webauthn.SessionData, response *http.Request)) *MockWebAuthnInterface_FinishRegistration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(webauthn.User), args[1].(webauthn.SessionData), args[2].(*http.Request))
	})
	return _c
}

func (_c *MockWebAuthnInterface_FinishRegistration_Call) Return(_a0 *webauthn.Credential, _a1 error) *MockWebAuthnInterface_FinishRegistration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWebAuthnInterface_FinishRegistration_Call) RunAndReturn(run func(webauthn.User, webauthn.SessionData, *http.Request) (*webauthn.Credential, error)) *MockWebAuthnInterface_FinishRegistration_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWebAuthnInterface creates a new instance of MockWebAuthnInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebAuthnInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebAuthnInterface {
	mock := &MockWebAuthnInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
